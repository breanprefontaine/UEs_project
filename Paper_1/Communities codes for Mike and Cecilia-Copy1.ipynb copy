{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Percentage (%)')"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#imports\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.ticker as ticker\n",
    "from matplotlib import colors as mcolors\n",
    "\n",
    "\n",
    "\n",
    "#Mike = [1, 0, 4, 3, 4, 1, 2, 6, 17, 1, 1, 0]\n",
    "#Cecilia  = [2, 2, 3, 6, 3, 3, 3, 0, 5, 2, 3, 3, 1]\n",
    "\n",
    "#plt.plot.bar(Mike, Cecilia)\n",
    "#plt.xlabel('Communities Overlap')\n",
    "#plt.ylabel('Percentage')\n",
    "\n",
    "#Data for Mike: \n",
    "#mike = {'m_pca_phys', 'm_pca_p','m_pca_si','m_pca_sr','m_pca_inf',\n",
    "     #  'm_pca_grad', 'm_pca_arts','m_phys_si','m_phys_sr','m_phys_inf',\n",
    "    #   'm_phys_grad', 'm_phys_arts'}\n",
    "#Mike = {'Mike overlap':[1, 0, 4, 3, 4, 1, 2, 6, 17, 1, 1, 0]}\n",
    "#m_df = pd.DataFrame(mike)\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "#Data for Cecilia\n",
    "#cecilia = {'c_pca_phys', 'c_pca_p','c_pca_si','c_pca_sr','c_pca_inf',\n",
    "# 'c_pca_grad', 'c_pca_arts','c_phys_si','c_phys_sr','c_phys_inf',\n",
    " #      'c_phys_grad', 'c_phys_arts'}\n",
    "\n",
    "CommunitiesOverlap= {'Communities':['PCA-Phys','PCA-personal','PCA-SI','PCA-SR','PCA-inf','PCA-grad','PCA-arts','Phys-SI','Phys-SR','Phys-inf','Phys-grad','Phys-arts'],\n",
    "                     'Cecilia':[2, 2, 3, 6, 3, 3, 0, 5, 2, 3, 3, 1],\n",
    "                      'Mike':[1, 0, 4, 3, 4, 1, 2, 6, 17, 1, 1, 0]}\n",
    "\n",
    "co_df = pd.DataFrame(CommunitiesOverlap)\n",
    "\n",
    "#print(co_df)\n",
    "#plt.bar(subjects[0],m_pca_phys,color='darkorchid',width=barWidth, label='Mike')\n",
    "co_df.plot(kind='bar',x='Communities',y=['Cecilia',\"Mike\"])\n",
    "plt.ylabel('Percentage (%)')\n",
    "\n",
    "#Cecilia= {'Communities':['PCA-Phys','PCA-personal','PCA-SI','PCA-SR','PCA-inf','PCA-grad','PCA-arts','Phys-SI','Phys-SR','Phys-inf','Phys-grad','Phys-arts'],\n",
    "            #         'Cecilia':[2, 2, 3, 6, 3, 3, 0, 5, 2, 3, 3, 1]}\n",
    "                      \n",
    "#Mike= {'Communities':['PCA-Phys','PCA-personal','PCA-SI','PCA-SR','PCA-inf','PCA-grad','PCA-arts','Phys-SI','Phys-SR','Phys-inf','Phys-grad','Phys-arts'],\n",
    "#                      'Mike':[1, 0, 4, 3, 4, 1, 2, 6, 17, 1, 1, 0]}\n",
    "\n",
    "\n",
    "\n",
    "#c_df = pd.DataFrame(Cecilia)\n",
    "#m_df = pd.DataFrame(Mike)\n",
    "\n",
    "\n",
    "#color_list = ['b', 'g', 'r', 'c']\n",
    "\n",
    "#ax.bar = c_df.plot()\n",
    "#m_df.plot(ax.bar=ax.bar)\n",
    "#c_df.plot(kind='bar', ax=plt.subplot(121), color='skyblue')\n",
    "#m_df.plot(kind='bar', ax=plt.subplot(122), color='pink')\n",
    "#fig.tight_layout(pad=0.1)\n",
    "#plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
